{"ast":null,"code":"var _jsxFileName = \"/Users/xu/project/IoT-monitoring/frontend/src/TemperatureChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\n// 注册 ChartJS 组件\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst TemperatureChart = () => {\n  _s();\n  const [temperatures, setTemperatures] = useState([]);\n  useEffect(() => {\n    const fetchTemperature = async () => {\n      try {\n        //const response = await fetch('/api/temperature/current');\n        const response = await fetch(\"http://backend:5001/api/temperature/current\");\n        const data = await response.json();\n        setTemperatures(prev => [...prev.slice(-10), data]); // 保留最近10条数据\n      } catch (error) {\n        console.error('Failed to fetch temperature:', error);\n      }\n    };\n    const interval = setInterval(fetchTemperature, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  const chartData = {\n    labels: temperatures.map(t => t.timestamp),\n    datasets: [{\n      label: 'Temperature (°C)',\n      data: temperatures.map(t => t.value),\n      borderColor: 'rgb(75, 192, 192)',\n      tension: 0.1\n    }]\n  };\n  const chartOptions = {\n    responsive: true,\n    scales: {\n      y: {\n        min: 20,\n        max: 35\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '80%',\n      margin: '0 auto'\n    },\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(TemperatureChart, \"bFUqW0EkzQyiLDuCYWpIj14n8No=\");\n_c = TemperatureChart;\nexport default TemperatureChart;\nvar _c;\n$RefreshReg$(_c, \"TemperatureChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","TemperatureChart","_s","temperatures","setTemperatures","fetchTemperature","response","fetch","data","json","prev","slice","error","console","interval","setInterval","clearInterval","chartData","labels","map","t","timestamp","datasets","label","value","borderColor","tension","chartOptions","responsive","scales","y","min","max","style","width","margin","children","options","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/xu/project/IoT-monitoring/frontend/src/TemperatureChart.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\n\n// 注册 ChartJS 组件\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\ninterface TemperatureData {\n  value: number;\n  timestamp: string;\n}\n\nconst TemperatureChart: React.FC = () => {\n  const [temperatures, setTemperatures] = useState<TemperatureData[]>([]);\n\n  useEffect(() => {\n    const fetchTemperature = async () => {\n      try {\n        //const response = await fetch('/api/temperature/current');\n        const response = await fetch(\"http://backend:5001/api/temperature/current\");\n        const data: TemperatureData = await response.json();\n        setTemperatures(prev => [...prev.slice(-10), data]); // 保留最近10条数据\n      } catch (error) {\n        console.error('Failed to fetch temperature:', error);\n      }\n    };\n\n    const interval = setInterval(fetchTemperature, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const chartData = {\n    labels: temperatures.map(t => t.timestamp),\n    datasets: [{\n      label: 'Temperature (°C)',\n      data: temperatures.map(t => t.value),\n      borderColor: 'rgb(75, 192, 192)',\n      tension: 0.1,\n    }],\n  };\n\n  const chartOptions = {\n    responsive: true,\n    scales: {\n      y: {\n        min: 20,\n        max: 35,\n      },\n    },\n  };\n\n  return (\n    <div style={{ width: '80%', margin: '0 auto' }}>\n      <Line data={chartData} options={chartOptions} />\n    </div>\n  );\n};\n\nexport default TemperatureChart;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SACEC,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAM,QACD,UAAU;;AAEjB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAT,OAAO,CAACU,QAAQ,CACdT,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MACF,CAAC;AAOD,MAAMI,gBAA0B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAoB,EAAE,CAAC;EAEvED,SAAS,CAAC,MAAM;IACd,MAAMmB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6CAA6C,CAAC;QAC3E,MAAMC,IAAqB,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QACnDL,eAAe,CAACM,IAAI,IAAI,CAAC,GAAGA,IAAI,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAEH,IAAI,CAAC,CAAC,CAAC,CAAC;MACvD,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD;IACF,CAAC;IAED,MAAME,QAAQ,GAAGC,WAAW,CAACV,gBAAgB,EAAE,IAAI,CAAC;IACpD,OAAO,MAAMW,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,SAAS,GAAG;IAChBC,MAAM,EAAEf,YAAY,CAACgB,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,SAAS,CAAC;IAC1CC,QAAQ,EAAE,CAAC;MACTC,KAAK,EAAE,kBAAkB;MACzBf,IAAI,EAAEL,YAAY,CAACgB,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACI,KAAK,CAAC;MACpCC,WAAW,EAAE,mBAAmB;MAChCC,OAAO,EAAE;IACX,CAAC;EACH,CAAC;EAED,MAAMC,YAAY,GAAG;IACnBC,UAAU,EAAE,IAAI;IAChBC,MAAM,EAAE;MACNC,CAAC,EAAE;QACDC,GAAG,EAAE,EAAE;QACPC,GAAG,EAAE;MACP;IACF;EACF,CAAC;EAED,oBACEjC,OAAA;IAAKkC,KAAK,EAAE;MAAEC,KAAK,EAAE,KAAK;MAAEC,MAAM,EAAE;IAAS,CAAE;IAAAC,QAAA,eAC7CrC,OAAA,CAACX,IAAI;MAACoB,IAAI,EAAES,SAAU;MAACoB,OAAO,EAAEV;IAAa;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;AAEV,CAAC;AAACvC,EAAA,CA5CID,gBAA0B;AAAAyC,EAAA,GAA1BzC,gBAA0B;AA8ChC,eAAeA,gBAAgB;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}