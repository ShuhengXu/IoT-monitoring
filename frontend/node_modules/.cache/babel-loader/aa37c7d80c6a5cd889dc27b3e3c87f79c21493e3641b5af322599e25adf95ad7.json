{"ast":null,"code":"var _jsxFileName = \"/Users/xu/project/IoT-monitoring/frontend/src/TemperatureChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst TemperatureChart = () => {\n  _s();\n  const [temperatures, setTemperatures] = useState([]);\n  useEffect(() => {\n    const fetchTemperature = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5001/api/temperature/current\");\n        const data = await response.json();\n        setTemperatures(prev => [...prev.slice(-10), data]);\n      } catch (error) {\n        console.error('Failed to fetch temperature:', error);\n      }\n    };\n    const interval = setInterval(fetchTemperature, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  const chartData = {\n    labels: temperatures.map(t => new Date(t.timestamp).toLocaleTimeString()),\n    datasets: [{\n      label: '🌡️ Temperature (°C)',\n      data: temperatures.map(t => t.value),\n      borderColor: '#007bff',\n      backgroundColor: 'rgba(0, 123, 255, 0.1)',\n      tension: 0.3,\n      fill: true\n    }]\n  };\n  const chartOptions = {\n    responsive: true,\n    scales: {\n      y: {\n        min: 20,\n        max: 35,\n        ticks: {\n          stepSize: 1\n        },\n        title: {\n          display: true,\n          text: 'Temperature (°C)',\n          color: '#333',\n          font: {\n            size: 14\n          }\n        }\n      },\n      x: {\n        ticks: {\n          maxTicksLimit: 10\n        },\n        title: {\n          display: true,\n          text: 'Time',\n          color: '#333',\n          font: {\n            size: 14\n          }\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: true,\n        position: 'top'\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    style: {\n      maxWidth: '800px',\n      margin: '2rem auto',\n      padding: '1.5rem',\n      backgroundColor: '#f7f9fc',\n      borderRadius: '12px',\n      boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        fontSize: '1.5rem',\n        marginBottom: '1.5rem',\n        color: '#333'\n      },\n      children: \"\\uD83D\\uDCC8 Real-Time Temperature Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(TemperatureChart, \"bFUqW0EkzQyiLDuCYWpIj14n8No=\");\n_c = TemperatureChart;\nexport default TemperatureChart;\nvar _c;\n$RefreshReg$(_c, \"TemperatureChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","TemperatureChart","_s","temperatures","setTemperatures","fetchTemperature","response","fetch","data","json","prev","slice","error","console","interval","setInterval","clearInterval","chartData","labels","map","t","Date","timestamp","toLocaleTimeString","datasets","label","value","borderColor","backgroundColor","tension","fill","chartOptions","responsive","scales","y","min","max","ticks","stepSize","title","display","text","color","font","size","x","maxTicksLimit","plugins","legend","position","style","maxWidth","margin","padding","borderRadius","boxShadow","children","fontSize","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","options","_c","$RefreshReg$"],"sources":["/Users/xu/project/IoT-monitoring/frontend/src/TemperatureChart.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\ninterface TemperatureData {\n  value: number;\n  timestamp: string;\n}\n\nconst TemperatureChart: React.FC = () => {\n  const [temperatures, setTemperatures] = useState<TemperatureData[]>([]);\n\n  useEffect(() => {\n    const fetchTemperature = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5001/api/temperature/current\");\n        const data: TemperatureData = await response.json();\n        setTemperatures(prev => [...prev.slice(-10), data]);\n      } catch (error) {\n        console.error('Failed to fetch temperature:', error);\n      }\n    };\n\n    const interval = setInterval(fetchTemperature, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const chartData = {\n    labels: temperatures.map(t => new Date(t.timestamp).toLocaleTimeString()),\n    datasets: [{\n      label: '🌡️ Temperature (°C)',\n      data: temperatures.map(t => t.value),\n      borderColor: '#007bff',\n      backgroundColor: 'rgba(0, 123, 255, 0.1)',\n      tension: 0.3,\n      fill: true,\n    }],\n  };\n\n  const chartOptions = {\n    responsive: true,\n    scales: {\n      y: {\n        min: 20,\n        max: 35,\n        ticks: { stepSize: 1 },\n        title: {\n          display: true,\n          text: 'Temperature (°C)',\n          color: '#333',\n          font: { size: 14 },\n        }\n      },\n      x: {\n        ticks: {\n          maxTicksLimit: 10,\n        },\n        title: {\n          display: true,\n          text: 'Time',\n          color: '#333',\n          font: { size: 14 },\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: true,\n        position: 'top' as const,\n      },\n    },\n  };\n\n  return (\n    <section\n      style={{\n        maxWidth: '800px',\n        margin: '2rem auto',\n        padding: '1.5rem',\n        backgroundColor: '#f7f9fc',\n        borderRadius: '12px',\n        boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)'\n      }}\n    >\n      <h2 style={{ fontSize: '1.5rem', marginBottom: '1.5rem', color: '#333' }}>\n        📈 Real-Time Temperature Chart\n      </h2>\n      <Line data={chartData} options={chartOptions} />\n    </section>\n  );\n};\n\nexport default TemperatureChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}